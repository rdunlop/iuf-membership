version: 2.1
orbs:
  tablexi: tablexi/standard@0.0.11
  browser-tools: circleci/browser-tools@1.4.1
executors:
  my_executor:
    # The working directory is important, so that we
    # install/cache everything relative to that location
    working_directory: ~/tmp
    docker:
      - image: cimg/ruby:3.1.6-browsers
        environment:
          RAILS_ENV: test
          # Bundle paths are necessary so that the gems are installed within the workspace
          # otherwise, they are installed in /usr/local
          BUNDLE_PATH: ~/tmp/vendor/bundle
          BUNDLE_APP_CONFIG: ~/tmp/vendor/bundle
          GEM_HOME: /home/circleci/tmp/vendor/bundle # NOTE: MUST be full path
          DATABASE_HOST: localhost
          DATABASE_USERNAME: ubuntu
          DATABASE_PASSWORD: password
      - image: cimg/postgres:14.5
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: password
jobs:
  build:
    executor: my_executor
    steps:
      - checkout

      # Gems
      # Restore the bundle of gems
      - restore_cache:
          key: badges-gemfile-cache-v4-{{ checksum "Gemfile.lock" }}
      - tablexi/install_bundler:
          executor: my_executor
      - run: mkdir -p `echo $GEM_HOME`
      - run: gem update bundler # install bundler 2
      - run: bundle install --without=development --jobs=4 --retry=3

      - save_cache:
          key: badges-gemfile-cache-v4-{{ checksum "Gemfile.lock" }}
          # NOTE: if this path directory is changed, the 'key' must be changed.
          # because caches are write-once, and always restore to the same path
          # they were in when they were stored.
          paths:
            - ~/tmp/vendor/bundle

      # Store the application code, configuration, and gems in a workspace
      - persist_to_workspace:
          root: .
          paths:
            - .
  yarn:
      executor: my_executor
      steps:
      - attach_workspace:
          at: ~/tmp

      - restore_cache:
          keys:
            - v2-yarn-cache-{{ arch }}--{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v2-yarn-cache-{{ arch }}--{{ .Branch }}
            - v2-yarn-cache

      # Install Desired NodeJS version
      - run:
          name: Swap node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v18
            nvm alias default 18

            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run: yarn

      - save_cache:
          key: v2-yarn-cache-{{ arch }}--{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/tmp/node_modules

      - persist_to_workspace:
          root: .
          paths:
            - .

  spec:
    executor: my_executor
    steps:
      - attach_workspace:
          at: ~/tmp

      - tablexi/wait_for_db:
          executor: my_executor

      - tablexi/install_bundler:
          executor: my_executor

      - run: bundle exec rake db:create

      - tablexi/load_db_schema:
          executor: my_executor

      - browser-tools/install-browser-tools

      # Install Desired NodeJS version
      - run:
          name: Swap node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v10
            nvm alias default 10

            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run: bundle exec rspec

  release_stage:
    executor: my_executor
    steps:
      - attach_workspace:
          at: ~/tmp

      - tablexi/wait_for_other_builds

      - run: bundle exec cap staging deploy

  release_prod:
    executor: my_executor
    steps:
      - attach_workspace:
          at: ~/tmp

      - run: bundle exec cap production deploy

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - yarn:
          requires:
            - build
      - spec:
          requires:
            - build
            - yarn
      - tablexi/rubocop:
          executor:
            name: my_executor
          requires:
            - build
      - tablexi/bundle_audit:
          executor:
            name: my_executor
          requires:
            - build
      - tablexi/check_db_schema:
          executor:
            name: my_executor
          requires:
            - build
      - release_stage:
          requires:
            - spec
            - tablexi/rubocop
            - tablexi/bundle_audit
            - tablexi/check_db_schema
          filters:
            branches:
              only:
                - main
      - approve-prod-push:
          type: approval
          requires:
            - release_stage
          filters:
            branches:
              only:
                - main
      - release_prod:
          requires:
            - approve-prod-push
          filters:
            branches:
              only:
                - main
